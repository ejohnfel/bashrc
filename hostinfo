#!/bin/bash

# csv, html, xml, json
OUTPUT_FORMAT="csv"

# Output name
FNAME_OUT="hostinfo_${HOSTNAME}.txt"

# Comment
USER_COMMENT=""

# Display on run
DISPLAYIT=1

# Usage Menu
function Usage()
{
	printf "===================\n"
	printf "= HostInfo - Usage\n"
	printf "===================\n"
	printf "-h\tThis menu\n"
	printf "-c\tSet comment\n"
	printf "-n\tNo comment (use hostname instead)\n"
	printf "-f\tOutput format (csv, xml, html, json)\n"
	printf "-o\tOutput filename\n"
	printf "-s\tBe silent during run\n"
}

# Output Header for selected output Format
# Parameters : [file]
function Header()
{
	case ${OUTPUT_FORMAT} in
	"csv")
		[ -f "${1}" ] && rm "${1}"
		;;
	"html")
		printf "<html>\n<body><table><tr><th>Field</th><th>Value</th></tr>\n" > "${1}"
		;;
	"xml")
		printf "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<fields>\n" > "${1}"
		;;
	"json")
		printf "{ " > "${1}"
		;;
	esac
}

# Output Data Tuple for selected output format
# Parameters: [file] [tag] [value]
function Data()
{
	OUTPUT="${1}"
	shift 1

	case ${OUTPUT_FORMAT} in
	"csv")
		printf "%s," "${1}" >> "${OUTPUT}"
		shift 1
		printf "%s\n" "${*}" >> "${OUTPUT}"
		;;
	"html")
		printf "<tr><td>%s</td><td>" "${1}" >> "${OUTPUT}"
		shift 1
		printf "%s</td></tr>\n" "${*}" >> "${OUTPUT}"
		;;
	"xml")
		printf "<field name=\"%s\">" "${1}" >> "${OUTPUT}"
		shift 1
		printf "%s</field>\n" "${*}" >> "${OUTPUT}"
		;;
	"json")
		printf "{ %s ," "${1}" >> "${OUTPUT}"
		shift 1
		printf " %s }\n" "${*}" >> "${OUTPUT}"
	esac
}

# Output Trailer for selected output format
# Parameters: [file]
function Trailer()
{
	case ${OUTPUT_FORMAT} in
	"csv")
		;;
	"html")
		printf "</body>\n</html>\n" >> "${1}"
		;;
	"xml")
		printf "<fields>\n" >> "${1}"
		;;
	"json")
		printf " }\n" >> "${1}"
		;;
	esac
}

# Parameters: tmpfile expr [includelines] [includeexpr]
function Snip()
{
        if [ "${3}" = "" ]; then
                grep -E "${2}" "${1}" | head -n 1 | cut -d":" -f2- | cut -d" " -f2-
        else
                grep -A ${3} -E "${2}" "${1}" | grep -E "${4}" | head -n 1 | cut -d":" -f2- | cut -d" " -f2-
        fi
}

# Snip Data From Multiple Lines
# Paramters: tmpfile expr [includelines] [includeexpr]
function SnipLines()
{
        if [ "${3}" = "" ]; then
                mapfile -t items <<< $(grep -E "${2}" "${1}" | cut -d":" -f2- | cut -d" " -f2-)
        else
                mapfile -t items <<< $(grep -A ${3} -E "${2}" "${1}" | grep -E "${4}" | cut -d":" -f2- | cut -d" " -f2-)
        fi

	echo "${items[@]}"
}

# Get Network Interfaces from LSHW Output
# Parameters: [input filename] [output filename] [pattern] [lines]
function GetNetworkInterfaces()
{
	local serial, product, vendor, description

	mapfile -t netitems <<< $(grep -A ${4} -E "${3}" "${1}")

	for ((index=0; index < ${#netitems[@]}; ++index)); do
		line="${netitems[${index}]}"

		if [[ ${line} =~ description\: ]]; then
			description=$(echo "${line}" | cut -d":" -f2- | cut -d" " -f2-)
		elif [[ ${line} =~ product\: ]]; then
			product=$(echo "${line}" | cut -d":" -f2- | cut -d" " -f2-)
		elif [[ ${line} =~ vendor\: ]]; then
			vendor=$(echo "${line}" | cut -d":" -f2- | cut -d" " -f2-)
		elif [[ ${line} =~ serial\: ]]; then
			serial=$(echo "${line}" | cut -d":" -f2- | cut -d" " -f2-)

			Data "${2}" "mac-address" "${serial}|${description}|${product}|${vendor}"
		fi
	done
}

# HostInfo : Get Info about host
function HostInfo()
{
        local tmp=/tmp/tmp.${RANDOM}
        local output="${FNAME_OUT}"

	Header "${output}"

        # Collect MAC, serial, dmi info

        lshw > /dev/null 2>&1

        if [ $? -gt 0 ]; then
                sudo apt-get -y install lshw > /dev/null 2>1&
        fi

	[ "${USER_COMMENT}" = "" ] && read -p "Comment: " USER_COMMENT

        sudo lshw > ${tmp} 2> /dev/null

        SERIAL_NUMBER=$(Snip ${tmp} "^\s+serial:")
        DESCRIPTION=$(Snip ${tmp} "^\s+description:")
        PRODUCT=$(Snip ${tmp} "^\s+product:")
        VENDOR=$(Snip ${tmp} "^\s+vendor:")
        HWVERSION=$(Snip ${tmp} "^\s+version:")
        WIDTH=$(Snip ${tmp} "^\s+width:")
        CPU=$(Snip ${tmp} "^\s+\*-cpu" 10 "^\s+product:")
        MEM=$(Snip ${tmp} "^\s+\*-memory" 4 "^\s+size:")
        # MAC_ADDRESS=$(SnipLines ${tmp} "\s{5,}\*-network" 15 "^\s+serial:")

	Data "${output}" "host" "${HOSTNAME}"
	Data "${output}" "comment" "${USER_COMMENT}"
	Data "${output}" "description" "${DESCRIPTION}"
	Data "${output}" "product" "${PRODUCT}"
	Data "${output}" "vendor" "${VENDOR}"
	Data "${output}" "serial-number" "${SERIAL_NUMBER}"
	Data "${output}" "hw-version" "${HWVERSION}"
	Data "${output}" "bus-width" "${WIDTH}"
	Data "${output}" "cpu" "${CPU}"
	Data "${output}" "memory" "${MEM}"
	#Data "${output}" "mac-addresses" "${MAC_ADDRESS}"

	GetNetworkInterfaces "${tmp}" "${output}" "\s{5,}\*-network" 15

	Trailer "${output}"

	[ -e "${output}" -a ${DISPLAYIT} -gt 0 ] && cat "${output}"

        [ -e ${tmp} ] && rm ${tmp}
}

#
# Main Loop
#

USER_COMMENT="${HOSTNAME}"

while getopts "c:nhf:o:s" opt; do
	case "${opt}" in
	"h")	Usage; exit 0 ;;
	"c")	USER_COMMENT="${OPTARG}" ;;
	"n")	USER_COMMENT="${HOSTNAME}" ;;
	"f")	OUTPUT_FORMAT="${OPTARG}" ;;
	"o")	FNAME_OUT="${OPTARG}" ;;
	"s")	DISPLAYIT=0 ;;
	esac
done

HostInfo
